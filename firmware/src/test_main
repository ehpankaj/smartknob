#include <Arduino.h>
const int numValues = 5;                                       // Total number of values
String values[numValues] = {"5", "Text1", "3", "Text2", "10"}; // Initial values
int selectedIndex = 0;                                         // Index of the currently selected value
bool editing = false;                                          // Indicates if user is currently typing a new value
String inputBuffer = "";                                       // Buffer to store user input

void handleEditInput(char input)
{
    if (input == '\n' || input == '\r')
    {                                        // Handle both Enter (newline) and carriage return
        values[selectedIndex] = inputBuffer; // Update the selected value
        editing = false;                     // Exit editing mode
    }
    else if (input == '\b' || input == 127)
    { // Handle backspace
        if (inputBuffer.length() > 0)
        {
            inputBuffer.remove(inputBuffer.length() - 1); // Remove the last character
        }
    }
    else
    {
        inputBuffer += input; // Add the new character to the input buffer
    }
}

bool isNumeric(String str)
{
    for (int i = 0; i < str.length(); i++)
    {
        if (!isDigit(str[i]))
            return false; // Check if each character is a digit
    }
    return true;
}
void displayValue(int index)
{
    if (index == selectedIndex)
    {
        Serial.print("-> "); // Highlight the selected value
    }
    else
    {
        Serial.print("   ");
    }
    Serial.println("Value " + String(index + 1) + ": " + values[index]);
}

void displayUI()
{
    Serial.println("\033[2J"); // Clear the entire screen
    Serial.println("\033[H");  // Move cursor to the top left

    Serial.println("=== Input Menu ===");
    for (int i = 0; i < numValues; i++)
    {
        displayValue(i); // Display each value with initial settings
    }

    Serial.println("\nUse Left/Right arrow keys to select, Up/Down to change (for numbers), or 'n' to type a value.");
    if (editing)
    {
        Serial.print("Editing: " + inputBuffer + " (Press Enter to confirm)");
    }
}

void updateUI()
{
    Serial.print("\033[H"); // Move cursor to the top left
    Serial.println("=== Input Menu ===");

    for (int i = 0; i < numValues; i++)
    {
        Serial.print("\033[K"); // Clear the line
        displayValue(i);        // Redraw only the current line
    }

    Serial.print("\033[K"); // Clear the last line
    if (editing)
    {
        Serial.print("Editing: " + inputBuffer + " (Press Enter to confirm)");
    }
    else
    {
        Serial.println("Use Left/Right arrow keys to select, Up/Down to change (for numbers), or 'n' to type a value.");
    }
}

void handleNavigationInput(char input)
{
    switch (input)
    {
    case 'n': // Enter edit mode to type a new value
        editing = true;
        inputBuffer = values[selectedIndex]; // Initialize buffer with the current value
        break;
    case 'a':                                                        // Left arrow key (in some terminals)
        selectedIndex = (selectedIndex - 1 + numValues) % numValues; // Move left
        break;
    case 'd':                                            // Right arrow key (in some terminals)
        selectedIndex = (selectedIndex + 1) % numValues; // Move right
        break;
    case 'w': // Up arrow key for increasing numeric values
        if (isNumeric(values[selectedIndex]))
        {
            values[selectedIndex] = String(values[selectedIndex].toInt() + 1); // Increment number
        }
        break;
    case 's': // Down arrow key for decreasing numeric values
        if (isNumeric(values[selectedIndex]))
        {
            values[selectedIndex] = String(values[selectedIndex].toInt() - 1); // Decrement number
        }
        break;
    default:
        Serial.println("Invalid Input");
        break;
    }
}

void setup()
{
    Serial.begin(115200); // Start serial communication
    displayUI();          // Display initial UI
}

void loop()
{
    if (Serial.available() > 0)
    {                               // Check if data is available from the serial monitor
        char input = Serial.read(); // Read input

        if (editing)
        {
            handleEditInput(input); // If in editing mode, handle user input for editing
        }
        else
        {
            handleNavigationInput(input); // Handle navigation input (arrow keys, etc.)
        }

        displayUI(); // Refresh the UI after any input
    }
}